import React, { useEffect, useState } from "react";
import { View, Text, ScrollView, ActivityIndicator, TextInput, Image, Button, TouchableOpacity } from "react-native";
import Footer from "../../../components/Layout/Footer";
import Header from "../../../components/Layout/Header";
import { useNavigation, useRoute } from "@react-navigation/native";
import { useDispatch, useSelector } from "react-redux";
import { getProductDetails, updateProduct } from "../../../redux/actions/productActions";
import * as ImagePicker from 'expo-image-picker'; // Updated image picker library
import axios from 'axios'; // Axios for HTTP requests
import Toast from 'react-native-toast-message'; // For notifications
import Icon from 'react-native-vector-icons/AntDesign'; // Importing icon library


const AdminProductsUpdate = () => {
  const dispatch = useDispatch();
  const navigation = useNavigation();
  const route = useRoute();


  // Get the productId from route params
  const { productId } = route.params;


  // Redux state: loading, product details
  const { product, loading, success } = useSelector((state) => state.product);


  // Local state for handling updates to product
  const [updatedProduct, setUpdatedProduct] = useState({
    name: "",
    price: "",
    stock: "",
    description: "",
    category: "",
    images: [], // Store image URIs
  });


  const [isUpdating, setIsUpdating] = useState(false);


  useEffect(() => {
    if (productId) {
      // Dispatch the action to fetch product details based on the productId
      dispatch(getProductDetails(productId));
    }
  }, [dispatch, productId]);


  useEffect(() => {
    if (product) {
      // Set the fetched product details in local state
      setUpdatedProduct({
        name: product.name || "",
        price: product.price || "",
        stock: product.stock || "",
        description: product.description || "",
        category: product.category || "",
        images: product.images.map(img => img.url) || [], // Initial images from the product
      });
    }
  }, [product]);


  const handleInputChange = (field, value) => {
    setUpdatedProduct((prevState) => ({
      ...prevState,
      [field]: value,
    }));
  };


  const handleUpdate = async () => {
    if (!updatedProduct.name || !updatedProduct.price || !updatedProduct.stock || !updatedProduct.category || updatedProduct.images.length === 0) {
      Toast.show({
        type: "error",
        text1: "All fields are required!",
      });
      return;
    }
 
    try {
      setIsUpdating(true);
 
      // Remove duplicate image URIs
      const uniqueImages = [...new Set(updatedProduct.images)];
 
      // Prepare form data for image uploads
      const uploadResponses = await Promise.all(
        uniqueImages.map(async (imageUri) => {
          const formData = new FormData();
          formData.append("file", {
            uri: imageUri,
            type: 'image/jpeg',
            name: imageUri.split("/").pop(),
          });
          formData.append("upload_preset", "ml_default");
 
          const response = await axios.post(
            'https://api.cloudinary.com/v1_1/dglawxazg/image/upload',
            formData,
            { headers: { 'Content-Type': 'multipart/form-data' } }
          );
 
          return {
            public_id: response.data.public_id,
            url: response.data.secure_url,
          };
        })
      );
 
      const productData = {
        ...updatedProduct,
        images: uploadResponses, // Add uploaded images with URLs and public_ids
        id: productId, // Add the productId here
      };
 
      dispatch(updateProduct(productData));
 
      setIsUpdating(false);
      Toast.show({
        type: "success",
        text1: "Product Updated Successfully!",
      });
      navigation.goBack();
    } catch (error) {
      console.error("Failed to upload images or update product", error);
      setIsUpdating(false);
      Toast.show({
        type: "error",
        text1: "Failed to update product. Please try again.",
      });
    }
  };


  // Function to pick images and update the local state
  const openImagePicker = async () => {
    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (!permissionResult.granted) {
      return alert("Permission to access gallery is required");
    }


    const data = await ImagePicker.launchImageLibraryAsync({
      allowsMultipleSelection: true,
      selectionLimit: 5,
    });


    if (data.assets) {
      const imageUris = data.assets.map(asset => asset.uri);
      setUpdatedProduct((prevState) => ({
        ...prevState,
        images: [...prevState.images, ...imageUris], // Add selected images
      }));
    }
  };


  // Function to remove an image from the list
  const removeImage = (imageUri) => {
    setUpdatedProduct((prevState) => ({
      ...prevState,
      images: prevState.images.filter((uri) => uri !== imageUri), // Filter out the image to remove
    }));
  };


  return (
    <View className="flex-1 bg-yellow-400">
      <Header back={true} />
      {loading ? (
        <View className="flex-1 justify-center items-center">
          <ActivityIndicator size="large" color="#0000ff" />
          <Text className="text-lg">Loading product details...</Text>
        </View>
      ) : (
        <ScrollView contentContainerStyle={{ flexGrow: 1, paddingBottom: 50 }}>
          <View className="bg-white rounded-t-3xl pt-0 mt-5 h-full px-4 shadow-lg">
            <View className="items-center">
              <Text className="text-2xl font-bold mt-3 mb-4">Update Product</Text>
            </View>


            {/* Displaying product images */}
            <View className="mt-5">
              <Text className="text-lg font-bold">Product Images:</Text>
              <ScrollView horizontal>
                {updatedProduct.images.map((imageUri, index) => (
                  <View key={index} className="relative">
                    <Image
                      source={{ uri: imageUri }}
                      style={{ width: 100, height: 100, marginRight: 10 }}
                    />
                    <TouchableOpacity
                      onPress={() => removeImage(imageUri)}
                      style={{
                        position: 'absolute',
                        top: 0,
                        right: 0,
                        backgroundColor: 'rgba(0, 0, 0, 0.5)',
                        padding: 5,
                        borderRadius: 50,
                      }}
                    >
                      <Icon name="close" size={20} color="white" />
                    </TouchableOpacity>
                  </View>
                ))}
              </ScrollView>
              <Button title="Pick Images" onPress={openImagePicker} />
            </View>


            {/* Input fields for updating product details */}
            <View className="mt-5">
              <Text className="text-lg font-bold">Product Name</Text>
              <TextInput
                value={updatedProduct.name}
                onChangeText={(text) => handleInputChange("name", text)}
                placeholder="Product Name"
                className="border-b-2 border-gray-300 p-2 text-lg"
              />


              <Text className="text-lg font-bold mt-4">Price</Text>
              <TextInput
                value={String(updatedProduct.price)}
                onChangeText={(text) => handleInputChange("price", text)}
                placeholder="Price"
                keyboardType="numeric"
                className="border-b-2 border-gray-300 p-2 text-lg mt-4"
              />


              <Text className="text-lg font-bold mt-4">Stock</Text>
              <TextInput
                value={String(updatedProduct.stock)}
                onChangeText={(text) => handleInputChange("stock", text)}
                placeholder="Stock"
                keyboardType="numeric"
                className="border-b-2 border-gray-300 p-2 text-lg mt-4"
              />


              <Text className="text-lg font-bold mt-4">Description</Text>
              <TextInput
                value={updatedProduct.description}
                onChangeText={(text) => handleInputChange("description", text)}
                placeholder="Description"
                multiline
                className="border-b-2 border-gray-300 p-2 text-lg mt-4"
              />
            </View>


            {/* Update Button */}
            <View className="mt-5">
              <Button title={isUpdating ? "Updating..." : "Update Product"} onPress={handleUpdate} disabled={isUpdating} />
            </View>
          </View>


          <View className="absolute bottom-0 w-full pt-0">
            <Footer activeRoute={"home"} />
          </View>
        </ScrollView>
      )}
    </View>
  );
};


export default AdminProductsUpdate;
